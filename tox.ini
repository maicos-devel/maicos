[tox]
minversion = 3.14.0
ignore_basepython_conflict = true
# these are the environments that will run when you
# execute `tox` in the command-line
# bellow you will find explanations for all environments
envlist =
    tests
    build
    docs
    lint

# configures which environments run with each python version
[testenv]
basepython =
    {tests,build,docs,lint,radon,safety}: {env:TOXPYTHON:python3}
passenv = *
#deps = -r{toxinidir}/cirequirements.txt

# configures the unittest environment for python 3.7
[testenv:tests]
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
usedevelop = true
# installs dependencies we need for testing
# by using tox the developer don't need to manage this dependencies
# him/herself
deps =
    -r{toxinidir}/requirements_cython.txt
    -r{toxinidir}/requirements_setup.txt
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/requirements.txt
# before running the tests erases any prerecord of coverage
commands_pre =
    coverage erase
# execute pytest
commands =
    pytest --cov --cov-report=term-missing --cov-append --cov-config=.coveragerc -vv --hypothesis-show-statistics {posargs}
# after executing the pytest assembles the coverage reports
commands_post =
    coverage report
    coverage html
    coverage xml

# in previous verions I had independent environments to manage the
# coverage reports. However, I found that doing such as pre and post
# commands facilitates many configuration details

# separates lint from build env
[testenv:lint]
deps =
    flake8>=4
    flake8-docstrings
    flake8-bugbear
    pygments
    isort
skip_install = true
commands =
    flake8 {posargs:maicos examples tests setup.py}
    isort --verbose --check-only --diff maicos examples tests setup.py

# asserts package build integrity
[testenv:build]
# dependencies needed for code quality checks
# you need to add here any additional dependencies you might need
deps =
    -r{toxinidir}/requirements_cython.txt
    -r{toxinidir}/requirements_setup.txt
    -r{toxinidir}/requirements.txt
    check-manifest
    twine
skip_install = true
commands_pre = python {toxinidir}/developer/clean_dist_check.py
commands =
    python --version
    python setup.py sdist
    twine check dist/*.tar.gz
    check-manifest {toxinidir}
    pip install --no-index --find-links {toxinidir}/dist/ maicos

# code quality assessment. This is not a check in the CI, serves just
# as info for the developer
[testenv:radon]
deps = radon
skip_install = true
commands =
    radon cc -s --total-average --no-assert {posargs:maicos}
    radon mi -m -s {posargs:maicos}

# Simulate docs building as it will occur on ReadTheDocs
# if this fails, most likely RTD build will fail
[testenv:docs]
usedevelop = true
deps =
    -r{toxinidir}/requirements_cython.txt
    -r{toxinidir}/requirements_setup.txt
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build {posargs:-E} -b html docs/source dist/docs

# safety checks
[testenv:safety]
deps = safety
skip_install = true
commands = safety check

# my favourite configuration for flake8 styling
# https://flake8.pycqa.org/en/latest/#
[flake8]
max_line_length = 80
hang-closing = true
ignore =
    D401
docstring-convention = numpy
exclude = maicos/__init__.py

# configuration for the isort module
[isort]
line_length = 80
indent = 4
multi_line_output = 8
include_trailing_comma = true
lines_after_imports = 2
known_first_party = maicos
known_third_party =
    MDAnalysis
    hypothesis
    matplotlib
    numpy
    pytest

[tool:pytest]
# If a pytest section is found in one of the possible config files
# (pytest.ini, tox.ini or setup.cfg), then pytest will not look for any others,
# so if you add a pytest config section elsewhere,
# you will need to delete this section from setup.cfg.
#norecursedirs =
#migrations
addopts = -p pytest_cov
python_files =
    test_*.py
    *_test.py
    tests.py
testpaths =
    tests
